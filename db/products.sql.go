// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name FROM categories
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, user_id, category_id, device_type, model, color, storage, battery_health, processor, ram, description, created_at FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CategoryID,
			&i.DeviceType,
			&i.Model,
			&i.Color,
			&i.Storage,
			&i.BatteryHealth,
			&i.Processor,
			&i.Ram,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, name FROM categories
WHERE id = $1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id pgtype.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, user_id, category_id, device_type, model, color, storage, battery_health, processor, ram, description, created_at FROM products
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id pgtype.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.DeviceType,
		&i.Model,
		&i.Color,
		&i.Storage,
		&i.BatteryHealth,
		&i.Processor,
		&i.Ram,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getProductsByCategory = `-- name: GetProductsByCategory :many
SELECT id, user_id, category_id, device_type, model, color, storage, battery_health, processor, ram, description, created_at FROM products
WHERE category_id = $1
`

func (q *Queries) GetProductsByCategory(ctx context.Context, categoryID pgtype.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CategoryID,
			&i.DeviceType,
			&i.Model,
			&i.Color,
			&i.Storage,
			&i.BatteryHealth,
			&i.Processor,
			&i.Ram,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByUser = `-- name: GetProductsByUser :many
SELECT id, user_id, category_id, device_type, model, color, storage, battery_health, processor, ram, description, created_at FROM products
WHERE user_id = $1
`

func (q *Queries) GetProductsByUser(ctx context.Context, userID pgtype.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CategoryID,
			&i.DeviceType,
			&i.Model,
			&i.Color,
			&i.Storage,
			&i.BatteryHealth,
			&i.Processor,
			&i.Ram,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCategory = `-- name: InsertCategory :exec
INSERT INTO categories (name) VALUES ($1)
`

func (q *Queries) InsertCategory(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, insertCategory, name)
	return err
}

const insertProduct = `-- name: InsertProduct :exec
INSERT INTO products (
    user_id,
    category_id,
    device_type,
    model,
    color,
    storage,
    battery_health,
    processor,
    ram,
    description,
    created_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type InsertProductParams struct {
	UserID        pgtype.UUID      `json:"user_id"`
	CategoryID    pgtype.UUID      `json:"category_id"`
	DeviceType    string           `json:"device_type"`
	Model         string           `json:"model"`
	Color         pgtype.Text      `json:"color"`
	Storage       pgtype.Text      `json:"storage"`
	BatteryHealth pgtype.Text      `json:"battery_health"`
	Processor     pgtype.Text      `json:"processor"`
	Ram           pgtype.Text      `json:"ram"`
	Description   pgtype.Text      `json:"description"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) error {
	_, err := q.db.Exec(ctx, insertProduct,
		arg.UserID,
		arg.CategoryID,
		arg.DeviceType,
		arg.Model,
		arg.Color,
		arg.Storage,
		arg.BatteryHealth,
		arg.Processor,
		arg.Ram,
		arg.Description,
		arg.CreatedAt,
	)
	return err
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE categories
SET name = $2
WHERE id = $1
`

type UpdateCategoryParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.Exec(ctx, updateCategory, arg.ID, arg.Name)
	return err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET 
    category_id = $2,
    device_type = $3,
    model = $4,
    color = $5,
    storage = $6,
    battery_health = $7,
    processor = $8,
    ram = $9,
    description = $10
WHERE id = $1
`

type UpdateProductParams struct {
	ID            pgtype.UUID `json:"id"`
	CategoryID    pgtype.UUID `json:"category_id"`
	DeviceType    string      `json:"device_type"`
	Model         string      `json:"model"`
	Color         pgtype.Text `json:"color"`
	Storage       pgtype.Text `json:"storage"`
	BatteryHealth pgtype.Text `json:"battery_health"`
	Processor     pgtype.Text `json:"processor"`
	Ram           pgtype.Text `json:"ram"`
	Description   pgtype.Text `json:"description"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.ID,
		arg.CategoryID,
		arg.DeviceType,
		arg.Model,
		arg.Color,
		arg.Storage,
		arg.BatteryHealth,
		arg.Processor,
		arg.Ram,
		arg.Description,
	)
	return err
}
